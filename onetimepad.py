import random


from ciphers import Cipher


class OneTimePad(Cipher):
    key_dict = {'a': 0, 'b': 15, 'c': 40, 'd': 55, 'e': 70, 'f': 85,
                'g': 1, 'h': 17, 'i': 41, 'j': 56, 'k': 71, 'l': 86,
                'm': 2, 'n': 18, 'o': 42, 'p': 57, 'q': 72, 'r': 87,
                's': 3, 't': 19, 'u': 43, 'v': 58, 'w': 73, 'x': 88,
                'y': 4, 'z': 38, '!': 44, '@': 59, '#': 74, '$': 89,
                '%': 5, '^': 20, '&': 45, '*': 60, '(': 75, ')': 90,
                '-': 6, '_': 21, '+': 46, '=': 61, '≤': 76, ' ': 91,
                '[': 7, ']': 22, '|': 47, 'º': 62, ':': 77, ';': 39,
                "÷": 8, '≥': 23, '<': 48, '>': 63, ',': 78, '.': 31,
                '?': 9, '/': 24, '0': 49, '1': 64, '2': 79, '3': 32,
                '4': 10, '5': 25, '6': 50, '7': 65, '8': 80, '9': 33,
                'A': 11, 'B': 27, 'C': 51, 'D': 66, 'E': 81, 'F': 34,
                'G': 12, 'H': 26, 'I': 52, 'J': 67, 'K': 82, 'L': 35,
                'M': 13, 'N': 28, 'O': 53, 'P': 68, 'Q': 83, 'R': 36,
                'S': 14, 'T': 29, 'U': 54, 'V': 69, 'W': 84, 'X': 37,
                'Y': 16, 'Z': 30, '~': 92}

    def encrypt(self, message):
        """
        Encrypts plaintext by assigning each character (letters, numbers,
        special characters) a unique numeric value (UNV).  Each of these values
        is added to a randomly generated number (RGN) associated with one of
        the UNV.  The new summed value (RGN + UNV) is modulo 92 (% 92) and
        stored as a new encrypted value (EV). The EV and RGN are converted to
        their character counterparts and stored in a pair of lists.  The
        function outputs both lists in padded five block segments named
        'Encrypted Text,' and 'Cypher Key.'
        """
        encrypted_text = ''
        cypher_key = ''
        index = 0

        lett_group = []
        rand_lett_group = []
        for letter in message:
            rand_num = random.randint(0, 91)
            num_of_lett = self.key_dict[letter]
            add_and_mod = (num_of_lett + rand_num) % 93
            lett_group.append(add_and_mod)
            rand_lett_group.append(rand_num)

        for num in lett_group:
            for key, val in self.key_dict.items():
                if val == num:
                    encrypted_text += key
                if val == rand_lett_group[index]:
                    cypher_key += key
            index += 1

        return (encrypted_text, cypher_key)

    def decrypt(self, encrypted_text, cypher_key):
        """
        Decrypts a string back to the original text passed
        to the encrypt function with the use of the
        cypher key generated by the same function.
        """
        unencrypted_text = ''
        blk_id = 0
        lett_id = 0

        for block in encrypted_text:

            # Convert letter to number and decrypt
            for letter in block:
                encrypt_num = self.key_dict[letter]
                cypher_num = self.key_dict[cypher_key[blk_id][lett_id]]
                uncrypt_num = (encrypt_num-cypher_num) % 93

                # Convert number to decrypted letter and append
                for key, val in self.key_dict.items():
                    if val == uncrypt_num:
                        unencrypted_text += key
                lett_id += 1
            blk_id += 1
            lett_id = 0
        return unencrypted_text

